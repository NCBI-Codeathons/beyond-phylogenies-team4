} # End defineClades function
define.clades(sub_tree)
merge.nested.clust <- function(clusters) {
copy <- clusters
result <- list()
unwanted <- list()
for (ct in seq_along(clusters)) {
for (cc in seq_along(copy)) {
if (isTRUE(all(clusters[[ct]]$to %in% copy[[cc]]$to) &
length(clusters[[ct]]$to) != length(copy[[cc]]$to))) {
unwanted[[ct]] <- clusters[[ct]]
} else{NULL}
}# End loop along copy
}# End loop along true
result <- setdiff(clusters, unwanted)
for (j in seq_along(result)) {
names(result)[[j]] <- paste0("c", j)
}
return(result)
}
merge.overlap.clust <- function(clusters) {
copy <- clusters
unwanted <- list()
result <- list()
for(ct in seq_along(clusters)) {
for(cc in seq_along(copy)) {
if (isTRUE(sum(copy[[cc]]$to %in% clusters[[ct]]$to) > 0.01*length(copy[[cc]]$to)) &
isTRUE(names(copy)[[cc]] != names(clusters)[[ct]])) {
unwanted[[cc]] <- copy[[cc]]
clusters[[ct]] <- full_join(copy[[cc]], clusters[[ct]], by=c("from", "to", "branch.length", "label"))
} else{clusters[[ct]] <- clusters[[ct]]}
} # End loop along copy
}# End loop along true
result <- setdiff(clusters, Filter(Negate(function(x) is.null(unlist(x))), unwanted)) %>%
mclapply(., function(x){
dplyr::select(x, from, to, branch.length, label) %>%
dplyr::arrange(from,to)
}, mc.cores=numCores) %>%
unique()
return(result)
}  # In case you want to remove this and consider only fully nested clusters
branchLengthLimit <- function(tree, threshold) {
p.dist.mat.leaves <- cophenetic(tree)
## Alternative distance matrix
# if(isTRUE(length(tree$tip.label) >= 10000)){
#   sample_leaves <- sample(tree$tip.label, 10000)
#   leaves_grid <- expand.grid(sample_leaves, sample_leaves)
#   p.dist.leaves <- sapply(seq_len(nrow(leaves_grid)), ## Create list of all pairwise combinations of IDs using expand.grid()
#                         function(k) { #future_sapply actually slower here!
#                           i <- leaves_grid[k,1]
#                           j <- leaves_grid[k,2]
#                           fastDist(tree, i,j)
#                         })
#   p.dist.mat.leaves <- matrix(p.dist.leaves,
#                             nrow=length(sample_leaves), ncol=length(sample_leaves),
#                             dimnames=list(sample_leaves,sample_leaves))
# } else  {
#  p.dist.mat.leaves <- cophenetic(tree)
#}
get.node.leaf.MPPD <- function(node,tree,distmat){
nlist <- geiger::tips(tree,node)
foo <- distmat[nlist,nlist]
return(median(foo[upper.tri(foo,diag=FALSE)]))
} ## Given a node, tree, and distance matrix, return median   pairwise patristic distance (MPPD) of its leaves
get.node.full.MPPD <- function(node,tree,distmat){
nlist <- geiger::tips(tree, node)
elist <- tree$edge[which.edge(tree,nlist),2]
foo <- distmat[elist,elist]
return(median(foo[upper.tri(foo,diag=FALSE)]))
} ## Given a node, tree, and distance matrix, return median pairwise patristic distance (MPPD) of all of its decendants
pdist.clusttree <- function(tree,distmat, mode=c('leaf', 'all')){
mode <- match.arg(mode)
ntips<- Ntip(tree)
nint <- tree$Nnode # Number of internal nodes
node_num <- (ntips+2):(ntips+nint) # Return all internal nodes
if (isTRUE(length(node_num) >= 1E06)) { # If tree too large, sample 10,000 nodes for MPPD calculation
node_num <- sample(node_num, 10000, replace = F)
}
if(mode=='leaf'){
distmat <-  p.dist.mat.leaves
MPPD <- sapply(node_num,get.node.leaf.MPPD,tree,distmat) # For each node, extract the MPPD (across patristic distances) for the corresponding subtree
return(data.frame(node_num=node_num, MPPD=MPPD))
}
else{
distmat <-  dist.nodes(tree)
MPPD <- sapply(node_num,get.node.full.MPPD,tree,distmat) # For each node, extract the MPPD (across all branch lengths) for the corresponding subtree
return(data.frame(node_num=node_num, MPPD=MPPD))
}
} ## Given a tree and (optionally) a distance matrix, return a vector giving the median pairwise patristic distance of the subtree under each internal node
pdist.clades <- function(clades, tree, distmat, mode=c('leaf', 'all')){
mode <- match.arg(mode)
if(mode=='leaf'){
distmat <-  p.dist.mat.leaves
mclapply(clades, function(x) {
get.node.leaf.MPPD(x$from[1], tree, distmat)
}, mc.cores=numCores)
} else{
distmat <-  dist.nodes(tree)
mclapply(clades, function(x) {
get.node.full.MPPD(x$from[1], tree, distmat)
}, mc.cores=numCores)
}
} ## Determine MPPD for all well-supported clades
## Create a vector of MPPDs for plotting and determining branch length limit
if(isTRUE(opt$cluster=="b")) {
distvec <- pdist.clusttree(tree, mode='all')
} else {
distvec <- pdist.clusttree(tree, mode='leaf')
## Determine MPPDs for all well-supported clades
clade_MPPD <- pdist.clades(clades, tree, mode='leaf')
assign("clade_MPPD", clade_MPPD, envir=globalenv())
}
hist(distvec$MPPD)
optimizeThreshold <- function(distvec, threshold) {
if (isTRUE(threshold=="median")) {
bl <- runif(100, 0, median(distvec$MPPD))
} else {
if (isTRUE(as.numeric(threshold)==0.01)) {
bl <- quantile(distvec$MPPD, as.numeric(threshold))
} else {
bl <- runif(round(as.numeric(threshold)*100), 0, as.numeric(quantile(distvec$MPPD, as.numeric(threshold))))
}
}
bl <- bl[order(bl)]
return(bl)
} # End optimizeThreshold function
#  branch_length_limit <- quantile(distvec$MPPD, opt$threshold)
branch_length_limit <- optimizeThreshold(distvec, opt$threshold)
return(branch_length_limit)
} # End branchlenghlimit function
## Singleton nodes are likely, so will need original nodes to map onto tree (above), but will need to force bifurcation
## for analysis by removing intermediate, lonely node.
bifurcate <- function(tree, clusters) {
x <- clusters  # Copy clusters list for ease
unwanted <- vector(mode="list", length=length(clusters))
for ( c in seq_along(x)) {
for( node in 2:nrow(x[[c]])) {
if (isTRUE(length(x[[c]]$parent[x[[c]]$parent==x[[c]]$parent[node]]) == 1)) { # For each row in a cluster, find parent nodes
## that only have one edge (need two for downstream analysis)
p <- x[[c]]$parent[node]
n <- x[[c]]$node[node]
pofp <- x[[c]]$parent[x[[c]]$node==p]
if(isTRUE(length(pofp) != 0)) {
unwanted <- x[[c]][x[[c]]$parent==pofp & x[[c]]$node==p,]
new_bl <- x[[c]]$branch.length[node] + x[[c]]$branch.length[x[[c]]$node==x[[c]]$parent[node]]
x[[c]]$parent[node] = pofp
x[[c]]$branch.length[node] = new_bl
x[[c]] <- setdiff(x[[c]], unwanted)
} # End if statement for pofp != 0 (not root)
} # End if statement ## If no lonely edges, let the cluster list be itself
}# End loop along row
}# End loop along clusters
return(x)
} # End function;
print("Determining branch length limit....")
branch_length_limit <- branchLengthLimit(sub_tree, opt$threshold)
if (opt$cluster == "b") {
print("DYNAMITE's branchwise algorithm is being used.")
branchWise <- function(tree, branch_length_limit) {
pickClust <- function(clade){
## Need to add mean_bl column  to original clade list
clade$mean_bl <- rep(Inf, nrow(clade))
clade$DATE <- do.call(rbind, invisible(mclapply(1:nrow(clade), function(i) {
if(clade$label[i] %in% sub_tree$tip.label) {
decimal_date(metadata$DATE[which(metadata$ID==clade$label[i])])
} else{
NA
}
}, mc.cores=numCores)))
clade$mean_pwdate <- rep(NA, nrow(clade)) ################################################
## Creating matrix for pairwise differences in dates
dates <- setNames(clade$DATE[!is.na(clade$DATE)], clade$label[!is.na(clade$DATE)])
pw_date_mat <- as.matrix(dist(dates))
pw_date_mat[lower.tri(pw_date_mat)] <- NA
## Set initial values
current_level <- as.numeric(2)
current_mean_bl <- as.numeric(-Inf)
## Initiate subclade using first two edges connected to root of clade (level=1)
sub_clade <- filter(clade, level==1,
branch.length <= branch_length_limit)
if (nrow(sub_clade) > 0) {
while(isTRUE(current_mean_bl <= branch_length_limit)){
# Create a vector of nodes sampled from the subsequent level
# Each iteration chooses amongst nodes that are connected to the current sub-clade:
next_level_nodes <- filter(clade, level == current_level,
from %in% sub_clade$to)
# A shortlist of possible enlargements of the sub-clade is kept to be able
# to compare each potential enlargement of the sub-clade and always keep the enlargement
# if the mean branch length is under the limit
#
# The shortlist is enlarged by vertices that are:
#  1) adjacent to the most recent added node(s)
#  2) not already IN the sub_clade
new_node <- dplyr::setdiff(next_level_nodes, sub_clade)
sub_clade <- rbind(sub_clade,new_node, fill=T)
tmp_date_mat <- as.matrix(pw_date_mat[rownames(pw_date_mat) %in% sub_clade$label, colnames(pw_date_mat) %in% sub_clade$label])
colnames(tmp_date_mat) <- colnames(pw_date_mat)[colnames(pw_date_mat) %in% sub_clade$label]
rownames(tmp_date_mat) <- rownames(pw_date_mat)[rownames(pw_date_mat) %in% sub_clade$label]
# The branch length is NOT calculated by the branch length of an individual
# edges leading to nodes in the shortlist BUT on the mean of the nodes in the previous level
# and added node.
for(x in 1:nrow(sub_clade)){
if (isTRUE(sub_clade$level[x] < current_level &
sub_clade$mean_bl[x] != Inf)) {
sub_clade$mean_bl[x] <- sub_clade$mean_bl[x]
} else{
node_path <- nodepath(sub_tree, sub_clade$from[1], sub_clade$to[x])
sub_clade$mean_bl[x] <- mean(sub_clade$branch.length[sub_clade$from %in% node_path & sub_clade$to %in% node_path])
####### Old method where all branches in previous level used ######################################################################################################3
# sub_clade$mean_bl[x] <- sum(c(sub_clade$branch.length[x],
#                               subset(sub_clade$branch.length, sub_clade$level < sub_clade$level[x])))/
#   length(c(sub_clade$branch.length[x],
#            subset(sub_clade$branch.length, sub_clade$level < sub_clade$level[x])))
if(sub_clade$label[x] %in% sub_tree$tip.label) {
n <- match(sub_clade$label[x],colnames(tmp_date_mat))
sub_clade$mean_pwdate[x] <- sum(tmp_date_mat[1:n,1:n], na.rm=T)/n*(n-1)
} else {
sub_clade$mean_pwdate[x] <- NA
}
}
} # End for loop
# Identify nodes with mean branch length > current mean branch length limit
# and remove from shortlist
unwanted_edges_at_current_level <- filter(sub_clade, level==current_level, mean_bl > branch_length_limit | mean_pwdate >= opt$serial/365)
sub_clade <- setdiff(sub_clade, unwanted_edges_at_current_level)
## Redefine current level and mean branch length, taking into account whether
## or not all nodes belonging to the current level have been filtered out
if (isTRUE(max(sub_clade$level)==current_level)) {
#current_mean_bl <- min(sub_clade$mean_bl[level=current_level])
current_mean_bl <- mean(sub_clade$branch.length)
} else {
current_mean_bl = Inf
} # End ifelse statement
current_level <- current_level+1
} # End tree traversal (while loop)
}else {
sub_clade <- NULL
}
return(sub_clade)
} # End pickClust function
clades <- mclapply(clades, function(x) {
if(nrow(x) >=8) {
x <- x
} else {
x <- NULL
}
return(x)
}, mc.cores=numCores) %>%
compact() ## Filter search to only clades with at least 5 sampled individuals
true_cluster_nodes <- mclapply(clades, pickClust, mc.cores=numCores) %>%
compact()
if(length(true_cluster_nodes) ==0) {
true_cluster_nodes <- NULL
} else {
true_cluster_nodes <- merge.nested.clust(true_cluster_nodes) %>%
merge.overlap.clust() %>%
merge.nested.clust()
true_cluster_nodes <-  list.filter(true_cluster_nodes, sum(label %in% tree$tip.label) >= 5) # Cilter clusters to those containing 5 individuals
true_cluster_nodes <- mclapply(true_cluster_nodes, function(x) dplyr::rename(x, parent=from, node=to),
mc.cores=numCores)
} # End if statement
return(true_cluster_nodes)
} # End branchwise function
.possible_clusters <- mclapply(branch_length_limit,
function(x) branchWise(sub_tree, x),
mc.cores = numCores) %>%
compact()
.nclust <- mclapply(.possible_clusters, length, mc.cores=numCores)
.best <- suppressWarnings(max(do.call("rbind", .nclust)))
true_cluster_nodes <- .possible_clusters[which(.nclust==.best)]
branch_length_limit <- branch_length_limit[which(.nclust==.best)]
if (length(true_cluster_nodes)>1) {
true_cluster_nodes <- last(true_cluster_nodes)
branch_length_limit <- last(branch_length_limit)
} else {
if (length(true_cluster_nodes)==0) {
print("NO CLUSTERS FOUND FOR THESE THRESHOLD PARAMETERS")
stop()
} else {
true_cluster_nodes <- true_cluster_nodes[[1]]
}
}
clusters <- bifurcate(sub_tree, true_cluster_nodes)
clusters <- mclapply(clusters, as_tibble, mc.cores=numCores)
} else {
if (opt$cluster == "c") {
print("DYNAMITE's cladewise algorithm (Phylopart) is being used.")
phylopart <- function(tree, branch_length_limit) {
clusters <- list()
for(clade in seq_along(clades)) {
if (isTRUE(clade_MPPD[[clade]] <= branch_length_limit)) {
clusters[[clade]] <- clades[[clade]]
} else{NULL}
}
clusters <- compact(clusters) %>%
merge.nested.clust() %>%
merge.overlap.clust() %>%
merge.nested.clust()
clusters <-  list.filter(clusters, sum(label %in% tree$tip.label) >= 5)
# for (j in seq_along(clusters)) {
#   names(clusters)[[j]] <- paste0("c", j)
# }
return(clusters)
}
.possible_clusters <- mclapply(branch_length_limit, function(x) phylopart(sub_tree, x), mc.cores = numCores)
.nclust <- mclapply(.possible_clusters, length, mc.cores=numCores)
.best <- max(do.call("rbind", .nclust))
clusters <- .possible_clusters[which(.nclust==.best)]
if (length(clusters)>1) {
clusters <- last(clusters)
} else {
clusters <- clusters[[1]]
}
clusters <- mclapply(clusters, function(x) dplyr::rename(x, parent=from, node=to), mc.cores=numCores)
branch_length_limit <- branch_length_limit[which(.nclust==.best)]
} else stop("Incorrect cluster_picking algorithm choice. Please choose between 'b' (branch-wise) or 'c' (clade-wise) and run script again.")}
if(isTRUE(length(clusters)==0)) {
stop("No clusters found. Please try a larger threshold.")
} else {
names(clusters) = mclapply(seq_along(clusters), function(x) {
names(clusters)[x] = paste0("c", x)
}, mc.cores=numCores)
}
clusterPhylo <- function() {
if (isTRUE(exists("time_tree", envir = globalenv()))) {
clusters_time_tree <- mclapply(clusters, function(x) {
tips <- x$label[x$label %in% time_tree$tip.label]
full_clade <- extract.clade(time_tree, findMRCA(time_tree, tips))
cluster <- keep.tip(full_clade, tips) # Need to make sure not full clade, but only tips present in cluster
return(cluster)
}, mc.cores=numCores)
assign("clusters_time_tree", clusters_time_tree, envir = globalenv() )
for (i in seq_along(clusters_time_tree)) {
write.tree(clusters_time_tree[[i]], paste0(names(clusters_time_tree)[i], "_timetree_", Sys.Date(), ".tree"))
}
} # End if statement
clusters_sub_tree <- mclapply(clusters, function(x) {
tips <- x$label[x$label %in% sub_tree$tip.label]
full_clade <- extract.clade(sub_tree, findMRCA(sub_tree, tips))
cluster <- keep.tip(full_clade, tips) # Need to make sure not full clade, but only tips present in cluster
return(cluster)
}, mc.cores=numCores)
assign("clusters_sub_tree", clusters_sub_tree, envir = globalenv() )
for (i in seq_along(clusters_sub_tree)) {
write.tree(clusters_sub_tree[[i]], paste0(names(clusters_sub_tree)[i], "_", Sys.Date(), ".tree"))
}
}
clusterPhylo()
unclusteredPhylo <- function() {
cluster_tips <- unlist(mclapply(clusters_sub_tree, function(x) {
x$tip.label
}, mc.cores=numCores))
background_subtree <- drop.tip(sub_tree, cluster_tips)
assign("background_subtree", background_subtree, envir = globalenv() )
write.tree(background_subtree, file=paste0("background_", Sys.Date(), ".tree"))
if(isTRUE(exists("time_tree", envir = globalenv()))) {
background_timetree <- drop.tip(time_tree, cluster_tips)
#   write.tree(background_timetree, file=paste0("background_timetree_", Sys.Date(), ".tree"))
}
}
unclusteredPhylo()
dataManip <- function(clusters) {
## Need to convert clusters to list if only a single cluster found (will be in dataframe format, rather than list)
if (class(clusters) == "data.frame") {
clusters <- list(clusters)
} else if (class(clusters) == "list") {
clusters <- clusters
} else {warning("class of clusters data unknown, error in dataManip() function or above")}
.metadata2 <- gather(metadata, field, trait, -ID, -DATE, factor_key=TRUE)
cluster_data <- list()
if (isTRUE(exists("asr", envir = globalenv()))) { #Only use if ASR incorporated above
asr2 <- bind_rows(asr, .id = "field")
asr2$to <- as.integer(asr2$to)
anc.state.data <- mclapply(clusters, function(x) {
anc.field <- dplyr::select(asr2, field, to) %>%
dplyr::filter(to == x$parent[1])
anc.trait <- dplyr::select(asr2,trait, to) %>%
dplyr::filter(to == x$parent[1])
x <- merge(anc.field, anc.trait, by="to")
return(x)
}, mc.cores = numCores)
for (i in seq_along(clusters)) {
cluster_data[[i]] <- merge(clusters[[i]], .metadata2, by.x = "label", by.y="ID", all=T) %>%
dplyr::select(parent, everything())
cluster_data[[i]] <- merge(cluster_data[[i]], anc.state.data[[i]], by.x=c("parent", "field", "trait"), by.y=c("to", "field", "trait"), all=T)
}
} else {
for (i in seq_along(clusters)) {
clusters[[i]]$ID <- clusters[[i]]$label
cluster_data[[i]] <- left_join(clusters[[i]], .metadata2, by="ID") %>%
dplyr::select(parent, node, ID, DATE, field, trait)
}
background_data <- data.frame(ID=background_subtree$tip.label) %>%
left_join(., .metadata2, by="ID") %>%
left_join(., select(family_tree, label, from, to) %>% rename(ID=label) , by="ID") %>%
rename(parent=from, node=to) %>%
mutate(cluster_id="Background")
assign("background_data", background_data, envir = globalenv())
}
names(cluster_data) <- names(clusters)
assign("cluster_data", cluster_data, envir = globalenv())
} # End dataManip() function
dataManip(clusters)
connectClust <- function(sub_tree, cluster_data) {
cluster_data <- cluster_data
dup_cluster_data <- cluster_data
full_tree <- as_tibble(sub_tree)
for (i in seq_along(cluster_data)) {
for (j in seq_along(dup_cluster_data)) {
dup_cluster_data[[j]]$birth_origin <- NA
#      dup_cluster_data[[j]]$birth_origin <- NA
## If the parent of origin node of one cluster (found by referencing full tree) is a child node in one of the other clusters...
if (isTRUE(names(cluster_data)[[i]] != names(dup_cluster_data)[[j]] &
(tidytree::parent(full_tree, dup_cluster_data[[j]]$parent[1])$node %in% cluster_data[[i]]$node |
## Or if the parent of the parent of the origin node of one cluster (found by referencing full tree) is a child node in one of the other clusters... (meaning clusters are allowed to be separated by up to two branches)
tidytree::parent(full_tree, dup_cluster_data[[j]]$parent[1])$parent %in% cluster_data[[i]]$node))) {
#        dup_cluster_data[[j]]$birth_origin == paste0("cluster_", cluster_data[[i]]$parent[1] )
dup_cluster_data[[j]]$birth_origin = paste0(names(cluster_data)[[i]])
} #End if statement
} # End for loop along duplicate list
}# End for loop along original list
return(dup_cluster_data)
} #End connectClust function
suppressWarnings(cluster_data <- connectClust(sub_tree, cluster_data))
calculatePD <- function(tree) {
tree <- multi2di(tree)
pd <- sum(tree$edge.length)
return(pd)
}
calculateOster <- function(tree) {
tree <- multi2di(tree)
cluster_size <- length(tree$tip.label)-1
sum_heights <- sum(nodeHeights(tree))
longest <- max(nodeHeights(tree))
co <- cluster_size/sum_heights + longest
return(co)
}
gatherStats <- function() {
#  total_Ne <- calculateNe(time_tree)
#  total_gamma <- calculateGamma(time_tree)
#  total_NeeBD <- calculateNeeBD(time_tree)
#  total_oster <- calculateOster(time_treee)
#  total_PD <- calculatePD(sub_tree)
#  total_df <- data.frame(x=total_Ne$time, y=total_Ne$nemed)
#  max_total_ne <- max(total_df$y); min_total_ne <- min(total_df$y)
#  max_total_t <- total_df$x[total_df$y==max_total_ne]; min_total_t <- min(total_df$x)
#  total_r = (max_total_ne-min_total_ne)/(max_total_t-min_total_t)
#  cluster_Ne <- mclapply(clusters_time_tree, calculateNe, mc.cores=numCores)
#  cluster_R0 <- mclapply(cluster_Ne, calculateR0, conf.level=0.95, mc.cores=numCores)
#  cluster_gamma <- mclapply(clusters_time_tree, calculateGamma, mc.cores=numCores)
#  cluster_growth_rates <- mclapply(cluster_Ne, function(x) {
#    calculateGrowth(x, total_r)}, mc.cores=numCores)
#  cluster_ltt_shape <- mclapply(clusters_time_tree, calculateLTT, mc.cores=numCores)
#  cluster_NeeBD <- mclapply(clusters_time_tree, calculateNeeBD, mc.cores=numCores)
#  cluster_cherries <- mclapply(clusters_sub_tree, calculateCC, mc.cores=numCores)
cluster_PD <- mclapply(clusters_sub_tree, calculatePD, mc.cores=numCores)
cluster_Oster <- mclapply(clusters_sub_tree, calculateOster, mc.cores=numCores)
background_dynamics <- data.frame(cluster_id="Background",
PD = calculatePD(background_subtree),
Oster = calculateOster(background_subtree))
## Populate cluster_dynamics table
cluster_dynamics <- mclapply (seq_along(clusters), function(i) {
data.frame(cluster_id=names(clusters)[i],
PD = cluster_PD[[i]],
Oster = cluster_Oster[[i]])}, mc.cores=numCores)
if (isTRUE(exists("time_tree", envir = globalenv()))) {
for (i in 1:length(cluster_dynamics)) {
cluster_dynamics[[i]] <- cbind(cluster_dynamics[[i]], timeData(clusters_time_tree[[i]]))
#      cluster_dynamics[[i]]$Oster <- calculateOster(clusters_time_tree[[i]])
}
background_dynamics <- cbind(cbind(background_dynamics,
#data.frame(Oster = calculateOster(background_time_tree)),
timeData(background_time_tree)))
} # End if statement
names(cluster_dynamics) <- names(clusters)
cluster_dynamics <- dplyr::bind_rows(cluster_dynamics, .id = "cluster_id") %>%
rbind(., background_dynamics)
return(cluster_dynamics)
}
cluster_tree_stats <- gatherStats()
cluster_data <- dplyr::bind_rows(cluster_data, .id = "cluster_id") %>%
full_join(., background_data, by=c("cluster_id", "parent", "node", "ID", "DATE", "field", "trait")) %>%
dplyr::filter(!is.na(DATE))
write("Data are now being exported as 'cluster_info_<tree>.RDS' and 'dynamite_<tree>.tree.'")
write.csv(select(cluster_data, -parent, -node), paste0("trait_distributions_", Sys.Date(), ".csv"), quote=F, row.names=F)
write.csv(cluster_tree_stats, paste0("tree_stats_", Sys.Date(), ".csv"), quote=F, row.names=F)
write.table(branch_length_limit, paste0("branch_length_limit.txt"), row.names=F, col.names = F)
# Read in full fasta
if (isTRUE(any(grepl("\\|", names(fa)))) &
!isTRUE(any(grepl("\\|", sub_tree$tip.label)))) {
names(fa) <- gsub("\\|", "_", names(fa))
names(fa) <- gsub("\\/", "_", names(fa))
}
cluster_fa_list <- mclapply(clusters_sub_tree, function(x) {
fa[names(fa) %in% x$tip.label]
})
for (i in seq_along(cluster_fa_list)) {
write.FASTA(cluster_fa_list[[i]], paste0(names(cluster_fa_list)[i], "_", Sys.Date(), ".fasta"))
}
background_fa <- fa[names(fa) %in% background_subtree$tip.label]
write.FASTA(background_fa, paste0("background_", Sys.Date(), ".fasta"))
rt1 <- Sys.time()
rt1-rt0
write.table(metadata, file=paste0("../updated_metadata_", Sys.Date(), ".tab"), quote=F, row.names=F, sep='\t')
gsub("hCoV-19(/[A-Za-z]+)/.+), "\\1", lineages$ID[1])
gsub("hCoV-19(/[A-Za-z]+)/.+), "\1", lineages$ID[1])
gsub("hCoV-19/([A-Za-z]+)/.+), "\\1", lineages$ID[1])
gsub("hCoV-19/([A-Za-z]+)/.+)", "\\1", lineages$ID[1])
gsub("hCoV-19/([A-Za-z]+)/.+)", "\\1", metadata$ID[1])
gsub("hCoV-19\\/([A-Za-z]+)\\/.+)", "\\1", metadata$ID[1])
gsub("hCoV-19\\/([A-Za-z]+)\\/.+", "\\1", metadata$ID[1])
gsub("hCoV-19/([A-Za-z]+)/.+", "\\1", metadata$ID[1])
